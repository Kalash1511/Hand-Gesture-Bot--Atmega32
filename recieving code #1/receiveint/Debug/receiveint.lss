
receiveint.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c76  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fc  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050c  00000000  00000000  0000180a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000487  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000037a  00000000  00000000  0000230f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00002689  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	50 c0       	rjmp	.+160    	; 0x13c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:



int main(void)
{
	USART_Init(51,0);
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	83 e3       	ldi	r24, 0x33	; 51
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	1f d0       	rcall	.+62     	; 0xe4 <USART_Init>
	//USART_Init(51,1);
	sei();
  a6:	78 94       	sei
#include "USART_128.h"
///#include <avr/interrupt.h>

void forward()
{
	PORTC=0b01010101;
  a8:	05 e5       	ldi	r16, 0x55	; 85
}
void backward()
{
	PORTC=0b10101010;
  aa:	1a ea       	ldi	r17, 0xAA	; 170
{
	PORTC=0b01000100;
}
void left()
{
	PORTC=0b00010001;
  ac:	d1 e1       	ldi	r29, 0x11	; 17
	//UCSR0B|=(1<<RXCIE0);
      while (1) 
    {
		//USART_Transmitchar('k',0) ;
		
		 if(USART_Receive(0)=='f')
  ae:	c4 e4       	ldi	r28, 0x44	; 68
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	36 d0       	rcall	.+108    	; 0x120 <USART_Receive>
		 {
			 forward();
		 }
		 if(USART_Receive(0)=='b')
  b4:	86 36       	cpi	r24, 0x66	; 102
  b6:	09 f4       	brne	.+2      	; 0xba <main+0x1c>
  b8:	05 bb       	out	0x15, r16	; 21
  ba:	80 e0       	ldi	r24, 0x00	; 0
{
	PORTC=0b01010101;
}
void backward()
{
	PORTC=0b10101010;
  bc:	31 d0       	rcall	.+98     	; 0x120 <USART_Receive>
		 }
		 if(USART_Receive(0)=='b')
		 {
			 backward();
		 }
		 if(USART_Receive(0)=='l')
  be:	82 36       	cpi	r24, 0x62	; 98
  c0:	09 f4       	brne	.+2      	; 0xc4 <main+0x26>
  c2:	15 bb       	out	0x15, r17	; 21
  c4:	80 e0       	ldi	r24, 0x00	; 0
{
	PORTC=0b01000100;
}
void left()
{
	PORTC=0b00010001;
  c6:	2c d0       	rcall	.+88     	; 0x120 <USART_Receive>
		 if(USART_Receive(0)=='l')
		 {
			 left();
			 
		 }
		 if(USART_Receive(0)=='r')
  c8:	8c 36       	cpi	r24, 0x6C	; 108
  ca:	09 f4       	brne	.+2      	; 0xce <main+0x30>
  cc:	d5 bb       	out	0x15, r29	; 21
  ce:	80 e0       	ldi	r24, 0x00	; 0
{
	PORTC=0b10101010;
}
void right()
{
	PORTC=0b01000100;
  d0:	27 d0       	rcall	.+78     	; 0x120 <USART_Receive>
		 if(USART_Receive(0)=='r')
		 {
			 right();
			 
		 }
		 if(USART_Receive(0)=='s')
  d2:	82 37       	cpi	r24, 0x72	; 114
  d4:	09 f4       	brne	.+2      	; 0xd8 <main+0x3a>
  d6:	c5 bb       	out	0x15, r28	; 21
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	22 d0       	rcall	.+68     	; 0x120 <USART_Receive>
{
	PORTC=0b00010001;
}
void stop()
{	
	PORTC=0b00000000;
  dc:	83 37       	cpi	r24, 0x73	; 115
  de:	41 f7       	brne	.-48     	; 0xb0 <main+0x12>
  e0:	15 ba       	out	0x15, r1	; 21
  e2:	e6 cf       	rjmp	.-52     	; 0xb0 <main+0x12>

000000e4 <USART_Init>:
		while ( !( UCSR1A & (1<<UDRE1)) );
		UDR1=data;
	}else
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
		UDR0=data;
  e4:	78 94       	sei
  e6:	66 23       	and	r22, r22
  e8:	79 f0       	breq	.+30     	; 0x108 <USART_Init+0x24>
  ea:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  ee:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  f2:	ea e9       	ldi	r30, 0x9A	; 154
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 61       	ori	r24, 0x18	; 24
  fa:	80 83       	st	Z, r24
  fc:	ed e9       	ldi	r30, 0x9D	; 157
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	86 60       	ori	r24, 0x06	; 6
 104:	80 83       	st	Z, r24
 106:	08 95       	ret
 108:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 10c:	89 b9       	out	0x09, r24	; 9
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	88 61       	ori	r24, 0x18	; 24
 112:	8a b9       	out	0x0a, r24	; 10
 114:	e5 e9       	ldi	r30, 0x95	; 149
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	86 60       	ori	r24, 0x06	; 6
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <USART_Receive>:
	}
}

unsigned char USART_Receive(uint8_t n )
{
	if(n)
 120:	88 23       	and	r24, r24
 122:	41 f0       	breq	.+16     	; 0x134 <USART_Receive+0x14>
	{
		while (! (UCSR1A & (1 << RXC1)) );
 124:	eb e9       	ldi	r30, 0x9B	; 155
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 23       	and	r24, r24
 12c:	ec f7       	brge	.-6      	; 0x128 <USART_Receive+0x8>
    	return UDR1;
 12e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 132:	08 95       	ret
	}else 
	{
		while (! (UCSR0A & (1 << RXC0)) );
 134:	5f 9b       	sbis	0x0b, 7	; 11
 136:	fe cf       	rjmp	.-4      	; 0x134 <USART_Receive+0x14>
    	return UDR0;
 138:	8c b1       	in	r24, 0x0c	; 12
	}
}
 13a:	08 95       	ret

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
