
acceltest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800100  00800100  00000b48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001354  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3c  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008cf  00000000  00000000  00002b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00003404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000660  00000000  00000000  00003688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008d0  00000000  00000000  00003ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000045b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5c c0       	rjmp	.+184    	; 0xba <__ctors_end>
   2:	00 00       	nop
   4:	6a c0       	rjmp	.+212    	; 0xda <__bad_interrupt>
   6:	00 00       	nop
   8:	68 c0       	rjmp	.+208    	; 0xda <__bad_interrupt>
   a:	00 00       	nop
   c:	66 c0       	rjmp	.+204    	; 0xda <__bad_interrupt>
   e:	00 00       	nop
  10:	64 c0       	rjmp	.+200    	; 0xda <__bad_interrupt>
  12:	00 00       	nop
  14:	62 c0       	rjmp	.+196    	; 0xda <__bad_interrupt>
  16:	00 00       	nop
  18:	60 c0       	rjmp	.+192    	; 0xda <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5e c0       	rjmp	.+188    	; 0xda <__bad_interrupt>
  1e:	00 00       	nop
  20:	5c c0       	rjmp	.+184    	; 0xda <__bad_interrupt>
  22:	00 00       	nop
  24:	5a c0       	rjmp	.+180    	; 0xda <__bad_interrupt>
  26:	00 00       	nop
  28:	58 c0       	rjmp	.+176    	; 0xda <__bad_interrupt>
  2a:	00 00       	nop
  2c:	56 c0       	rjmp	.+172    	; 0xda <__bad_interrupt>
  2e:	00 00       	nop
  30:	54 c0       	rjmp	.+168    	; 0xda <__bad_interrupt>
  32:	00 00       	nop
  34:	52 c0       	rjmp	.+164    	; 0xda <__bad_interrupt>
  36:	00 00       	nop
  38:	50 c0       	rjmp	.+160    	; 0xda <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4e c0       	rjmp	.+156    	; 0xda <__bad_interrupt>
  3e:	00 00       	nop
  40:	4c c0       	rjmp	.+152    	; 0xda <__bad_interrupt>
  42:	00 00       	nop
  44:	4a c0       	rjmp	.+148    	; 0xda <__bad_interrupt>
  46:	00 00       	nop
  48:	48 c0       	rjmp	.+144    	; 0xda <__bad_interrupt>
  4a:	00 00       	nop
  4c:	46 c0       	rjmp	.+140    	; 0xda <__bad_interrupt>
  4e:	00 00       	nop
  50:	44 c0       	rjmp	.+136    	; 0xda <__bad_interrupt>
  52:	00 00       	nop
  54:	42 c0       	rjmp	.+132    	; 0xda <__bad_interrupt>
  56:	00 00       	nop
  58:	40 c0       	rjmp	.+128    	; 0xda <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3e c0       	rjmp	.+124    	; 0xda <__bad_interrupt>
  5e:	00 00       	nop
  60:	3c c0       	rjmp	.+120    	; 0xda <__bad_interrupt>
  62:	00 00       	nop
  64:	3a c0       	rjmp	.+116    	; 0xda <__bad_interrupt>
  66:	00 00       	nop
  68:	38 c0       	rjmp	.+112    	; 0xda <__bad_interrupt>
  6a:	00 00       	nop
  6c:	36 c0       	rjmp	.+108    	; 0xda <__bad_interrupt>
  6e:	00 00       	nop
  70:	34 c0       	rjmp	.+104    	; 0xda <__bad_interrupt>
  72:	00 00       	nop
  74:	32 c0       	rjmp	.+100    	; 0xda <__bad_interrupt>
  76:	00 00       	nop
  78:	30 c0       	rjmp	.+96     	; 0xda <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2e c0       	rjmp	.+92     	; 0xda <__bad_interrupt>
  7e:	00 00       	nop
  80:	2c c0       	rjmp	.+88     	; 0xda <__bad_interrupt>
  82:	00 00       	nop
  84:	2a c0       	rjmp	.+84     	; 0xda <__bad_interrupt>
  86:	00 00       	nop
  88:	28 c0       	rjmp	.+80     	; 0xda <__bad_interrupt>
  8a:	00 00       	nop
  8c:	08 4a       	sbci	r16, 0xA8	; 168
  8e:	d7 3b       	cpi	r29, 0xB7	; 183
  90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
  92:	01 6e       	ori	r16, 0xE1	; 225
  94:	84 bc       	out	0x24, r8	; 36
  96:	bf fd       	.word	0xfdbf	; ????
  98:	c1 2f       	mov	r28, r17
  9a:	3d 6c       	ori	r19, 0xCD	; 205
  9c:	74 31       	cpi	r23, 0x14	; 20
  9e:	9a bd       	out	0x2a, r25	; 42
  a0:	56 83       	std	Z+6, r21	; 0x06
  a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
  a4:	3d 00       	.word	0x003d	; ????
  a6:	c7 7f       	andi	r28, 0xF7	; 247
  a8:	11 be       	out	0x31, r1	; 49
  aa:	d9 e4       	ldi	r29, 0x49	; 73
  ac:	bb 4c       	sbci	r27, 0xCB	; 203
  ae:	3e 91       	ld	r19, -X
  b0:	6b aa       	std	Y+51, r6	; 0x33
  b2:	aa be       	out	0x3a, r10	; 58
  b4:	00 00       	nop
  b6:	00 80       	ld	r0, Z
  b8:	3f 00       	.word	0x003f	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d0 e1       	ldi	r29, 0x10	; 16
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_clear_bss>:
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
  ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
  d0:	a9 31       	cpi	r26, 0x19	; 25
  d2:	b2 07       	cpc	r27, r18
  d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
  d6:	e1 d0       	rcall	.+450    	; 0x29a <main>
  d8:	fb c4       	rjmp	.+2550   	; 0xad0 <_exit>

000000da <__bad_interrupt>:
  da:	92 cf       	rjmp	.-220    	; 0x0 <__vectors>

000000dc <Get_Accel_X>:
int8_t ACCEL_ZOUT_L;
int8_t ACCEL_ZOUT_H;

float Get_Accel_X()
{
	ACCEL_XOUT = TWI_ReadRegisterNACK(0x68<<1,0x3B);
  dc:	6b e3       	ldi	r22, 0x3B	; 59
  de:	80 ed       	ldi	r24, 0xD0	; 208
  e0:	22 d2       	rcall	.+1092   	; 0x526 <TWI_ReadRegisterNACK>
	ACCEL_XOUT = ACCEL_XOUT<<8;
  e2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ACCEL_XOUT>
  e6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ACCEL_XOUT+0x1>
	ACCEL_XOUT |= TWI_ReadRegisterNACK(0x68<<1,0x3C);
  ea:	6c e3       	ldi	r22, 0x3C	; 60
  ec:	80 ed       	ldi	r24, 0xD0	; 208
  ee:	1b d2       	rcall	.+1078   	; 0x526 <TWI_ReadRegisterNACK>
  f0:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <ACCEL_XOUT>
  f4:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <ACCEL_XOUT+0x1>
  f8:	68 2b       	or	r22, r24
  fa:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <ACCEL_XOUT+0x1>
  fe:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <ACCEL_XOUT>
	float a= ((float)ACCEL_XOUT/16384)-ACCEL_XOFFSET;
	return a;
 102:	07 2e       	mov	r0, r23
 104:	00 0c       	add	r0, r0
 106:	88 0b       	sbc	r24, r24
 108:	99 0b       	sbc	r25, r25
 10a:	45 d3       	rcall	.+1674   	; 0x796 <__floatsisf>
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	40 e8       	ldi	r20, 0x80	; 128
 112:	58 e3       	ldi	r21, 0x38	; 56
 114:	20 d4       	rcall	.+2112   	; 0x956 <__mulsf3>
 116:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <ACCEL_XOFFSET>
 11a:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <ACCEL_XOFFSET+0x1>
 11e:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <ACCEL_XOFFSET+0x2>
 122:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <ACCEL_XOFFSET+0x3>
}
 126:	3c c2       	rjmp	.+1144   	; 0x5a0 <__subsf3>

00000128 <Get_Accel_Y>:

float Get_Accel_Y()
{
	
	ACCEL_YOUT = TWI_ReadRegisterNACK(0x68<<1,0x3D);
 128:	6d e3       	ldi	r22, 0x3D	; 61
 12a:	80 ed       	ldi	r24, 0xD0	; 208
 12c:	fc d1       	rcall	.+1016   	; 0x526 <TWI_ReadRegisterNACK>
	ACCEL_YOUT = ACCEL_YOUT<<8;
 12e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ACCEL_YOUT>
 132:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ACCEL_YOUT+0x1>
	ACCEL_YOUT |= TWI_ReadRegisterNACK(0x68<<1,0x3E);
 136:	6e e3       	ldi	r22, 0x3E	; 62
 138:	80 ed       	ldi	r24, 0xD0	; 208
 13a:	f5 d1       	rcall	.+1002   	; 0x526 <TWI_ReadRegisterNACK>
 13c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <ACCEL_YOUT>
 140:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <ACCEL_YOUT+0x1>
 144:	68 2b       	or	r22, r24
 146:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <ACCEL_YOUT+0x1>
 14a:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <ACCEL_YOUT>
	float a=((float)ACCEL_YOUT/16384)-ACCEL_YOFFSET;
	return a;
 14e:	07 2e       	mov	r0, r23
 150:	00 0c       	add	r0, r0
 152:	88 0b       	sbc	r24, r24
 154:	99 0b       	sbc	r25, r25
 156:	1f d3       	rcall	.+1598   	; 0x796 <__floatsisf>
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e8       	ldi	r20, 0x80	; 128
 15e:	58 e3       	ldi	r21, 0x38	; 56
 160:	fa d3       	rcall	.+2036   	; 0x956 <__mulsf3>
 162:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <ACCEL_YOFFSET>
 166:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <ACCEL_YOFFSET+0x1>
 16a:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <ACCEL_YOFFSET+0x2>
 16e:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <ACCEL_YOFFSET+0x3>
	
}
 172:	16 c2       	rjmp	.+1068   	; 0x5a0 <__subsf3>

00000174 <Get_Accel_Z>:

float Get_Accel_Z()
{
	ACCEL_ZOUT = TWI_ReadRegisterNACK(0x68<<1,0x3F);
 174:	6f e3       	ldi	r22, 0x3F	; 63
 176:	80 ed       	ldi	r24, 0xD0	; 208
 178:	d6 d1       	rcall	.+940    	; 0x526 <TWI_ReadRegisterNACK>
	ACCEL_ZOUT = ACCEL_YOUT<<8;
 17a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ACCEL_YOUT>
 17e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ACCEL_ZOUT>
 182:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ACCEL_ZOUT+0x1>
	ACCEL_ZOUT |= TWI_ReadRegisterNACK(0x68<<1,0x40);
 186:	60 e4       	ldi	r22, 0x40	; 64
 188:	80 ed       	ldi	r24, 0xD0	; 208
 18a:	cd d1       	rcall	.+922    	; 0x526 <TWI_ReadRegisterNACK>
 18c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <ACCEL_ZOUT>
 190:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <ACCEL_ZOUT+0x1>
 194:	68 2b       	or	r22, r24
 196:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <ACCEL_ZOUT+0x1>
 19a:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <ACCEL_ZOUT>
	float a = ((float)ACCEL_ZOUT/16384)-ACCEL_ZOFFSET;
	return a;
 19e:	07 2e       	mov	r0, r23
 1a0:	00 0c       	add	r0, r0
 1a2:	88 0b       	sbc	r24, r24
 1a4:	99 0b       	sbc	r25, r25
 1a6:	f7 d2       	rcall	.+1518   	; 0x796 <__floatsisf>
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	40 e8       	ldi	r20, 0x80	; 128
 1ae:	58 e3       	ldi	r21, 0x38	; 56
 1b0:	d2 d3       	rcall	.+1956   	; 0x956 <__mulsf3>
 1b2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 1b6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 1ba:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_edata+0x2>
 1be:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <_edata+0x3>
}
 1c2:	ee c1       	rjmp	.+988    	; 0x5a0 <__subsf3>

000001c4 <Acceleration_config>:

void Acceleration_config()											//Removing initial zero error, device should be kept horizontal initially
{
 1c4:	4f 92       	push	r4
 1c6:	5f 92       	push	r5
 1c8:	6f 92       	push	r6
 1ca:	7f 92       	push	r7
 1cc:	8f 92       	push	r8
 1ce:	9f 92       	push	r9
 1d0:	af 92       	push	r10
 1d2:	bf 92       	push	r11
 1d4:	cf 92       	push	r12
 1d6:	df 92       	push	r13
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	c4 ef       	ldi	r28, 0xF4	; 244
 1e2:	d1 e0       	ldi	r29, 0x01	; 1
	
	float ACCEL_XOFFSETSUM=0,ACCEL_YOFFSETSUM=0, ACCEL_ZOFFSETSUM=0;
 1e4:	41 2c       	mov	r4, r1
 1e6:	51 2c       	mov	r5, r1
 1e8:	32 01       	movw	r6, r4
 1ea:	73 01       	movw	r14, r6
 1ec:	62 01       	movw	r12, r4
 1ee:	53 01       	movw	r10, r6
	for(int i =0;i<500;i++)
	{
		ACCEL_XOFFSETSUM +=Get_Accel_X();
 1f0:	42 01       	movw	r8, r4
 1f2:	74 df       	rcall	.-280    	; 0xdc <Get_Accel_X>
 1f4:	9b 01       	movw	r18, r22
 1f6:	ac 01       	movw	r20, r24
 1f8:	c5 01       	movw	r24, r10
 1fa:	b4 01       	movw	r22, r8
 1fc:	d2 d1       	rcall	.+932    	; 0x5a2 <__addsf3>
		ACCEL_YOFFSETSUM +=Get_Accel_Y();
 1fe:	4b 01       	movw	r8, r22
 200:	5c 01       	movw	r10, r24
 202:	92 df       	rcall	.-220    	; 0x128 <Get_Accel_Y>
 204:	9b 01       	movw	r18, r22
 206:	ac 01       	movw	r20, r24
 208:	c7 01       	movw	r24, r14
 20a:	b6 01       	movw	r22, r12
 20c:	ca d1       	rcall	.+916    	; 0x5a2 <__addsf3>
		ACCEL_ZOFFSETSUM += Get_Accel_Z();
 20e:	6b 01       	movw	r12, r22
 210:	7c 01       	movw	r14, r24
 212:	b0 df       	rcall	.-160    	; 0x174 <Get_Accel_Z>
 214:	9b 01       	movw	r18, r22
 216:	ac 01       	movw	r20, r24
 218:	c3 01       	movw	r24, r6
 21a:	b2 01       	movw	r22, r4
 21c:	c2 d1       	rcall	.+900    	; 0x5a2 <__addsf3>
 21e:	2b 01       	movw	r4, r22

void Acceleration_config()											//Removing initial zero error, device should be kept horizontal initially
{
	
	float ACCEL_XOFFSETSUM=0,ACCEL_YOFFSETSUM=0, ACCEL_ZOFFSETSUM=0;
	for(int i =0;i<500;i++)
 220:	3c 01       	movw	r6, r24
		ACCEL_XOFFSETSUM +=Get_Accel_X();
		ACCEL_YOFFSETSUM +=Get_Accel_Y();
		ACCEL_ZOFFSETSUM += Get_Accel_Z();
	}
	
	ACCEL_ZOFFSET=ACCEL_ZOFFSETSUM/500.0;
 222:	21 97       	sbiw	r28, 0x01	; 1
 224:	31 f7       	brne	.-52     	; 0x1f2 <Acceleration_config+0x2e>
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	4a ef       	ldi	r20, 0xFA	; 250
 22c:	53 e4       	ldi	r21, 0x43	; 67
 22e:	49 d2       	rcall	.+1170   	; 0x6c2 <__divsf3>
 230:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 234:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 238:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
	ACCEL_XOFFSET=ACCEL_XOFFSETSUM/500.0;
 23c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	4a ef       	ldi	r20, 0xFA	; 250
 246:	53 e4       	ldi	r21, 0x43	; 67
 248:	c5 01       	movw	r24, r10
 24a:	b4 01       	movw	r22, r8
 24c:	3a d2       	rcall	.+1140   	; 0x6c2 <__divsf3>
 24e:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <ACCEL_XOFFSET>
 252:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <ACCEL_XOFFSET+0x1>
 256:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ACCEL_XOFFSET+0x2>
	ACCEL_YOFFSET=ACCEL_YOFFSETSUM/500.0;
 25a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <ACCEL_XOFFSET+0x3>
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	4a ef       	ldi	r20, 0xFA	; 250
 264:	53 e4       	ldi	r21, 0x43	; 67
 266:	c7 01       	movw	r24, r14
 268:	b6 01       	movw	r22, r12
 26a:	2b d2       	rcall	.+1110   	; 0x6c2 <__divsf3>
 26c:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <ACCEL_YOFFSET>
 270:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <ACCEL_YOFFSET+0x1>
 274:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <ACCEL_YOFFSET+0x2>
 278:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <ACCEL_YOFFSET+0x3>
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	cf 90       	pop	r12
 288:	bf 90       	pop	r11
 28a:	af 90       	pop	r10
 28c:	9f 90       	pop	r9
 28e:	8f 90       	pop	r8
 290:	7f 90       	pop	r7
 292:	6f 90       	pop	r6
 294:	5f 90       	pop	r5
 296:	4f 90       	pop	r4
 298:	08 95       	ret

0000029a <main>:

int main(void)
{
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <main+0x6>
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <main+0x8>
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
	USART_Init(51,0);
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	83 e3       	ldi	r24, 0x33	; 51
	TWI_Init();
 2aa:	90 e0       	ldi	r25, 0x00	; 0
	Acceleration_config();
 2ac:	4d d1       	rcall	.+666    	; 0x548 <USART_Init>
   // sei();
	TWI_WriteRegister(0x68<<1,0x6B,0x00);
 2ae:	ff d0       	rcall	.+510    	; 0x4ae <TWI_Init>
 2b0:	89 df       	rcall	.-238    	; 0x1c4 <Acceleration_config>
 		USART_TransmitFloat(Get_Accel_Y(),0);
 		USART_Transmitchar('z',0);
 		USART_TransmitFloat(Get_Accel_Z(),0);
		USART_Transmitchar(0x0D,0);*/
		
		float x=Get_Accel_X();
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	6b e6       	ldi	r22, 0x6B	; 107
 2b6:	80 ed       	ldi	r24, 0xD0	; 208
		float y=Get_Accel_Y();
 2b8:	22 d1       	rcall	.+580    	; 0x4fe <TWI_WriteRegister>
 2ba:	10 df       	rcall	.-480    	; 0xdc <Get_Accel_X>
 2bc:	4b 01       	movw	r8, r22
		float z=Get_Accel_Z();
 2be:	5c 01       	movw	r10, r24
 2c0:	33 df       	rcall	.-410    	; 0x128 <Get_Accel_Y>
		float pitch = -(atan(x/sqrt((y*y)+(z*z))))*(180/3.1415);
 2c2:	6b 01       	movw	r12, r22
 2c4:	7c 01       	movw	r14, r24
 2c6:	56 df       	rcall	.-340    	; 0x174 <Get_Accel_Z>
 2c8:	9b 01       	movw	r18, r22
 2ca:	ac 01       	movw	r20, r24
 2cc:	44 d3       	rcall	.+1672   	; 0x956 <__mulsf3>
 2ce:	69 83       	std	Y+1, r22	; 0x01
 2d0:	7a 83       	std	Y+2, r23	; 0x02
 2d2:	8b 83       	std	Y+3, r24	; 0x03
 2d4:	9c 83       	std	Y+4, r25	; 0x04
 2d6:	a7 01       	movw	r20, r14
 2d8:	96 01       	movw	r18, r12
 2da:	c7 01       	movw	r24, r14
 2dc:	b6 01       	movw	r22, r12
 2de:	3b d3       	rcall	.+1654   	; 0x956 <__mulsf3>
 2e0:	2b 01       	movw	r4, r22
 2e2:	3c 01       	movw	r6, r24
 2e4:	29 81       	ldd	r18, Y+1	; 0x01
 2e6:	3a 81       	ldd	r19, Y+2	; 0x02
 2e8:	4b 81       	ldd	r20, Y+3	; 0x03
 2ea:	5c 81       	ldd	r21, Y+4	; 0x04
 2ec:	c3 01       	movw	r24, r6
 2ee:	b2 01       	movw	r22, r4
 2f0:	58 d1       	rcall	.+688    	; 0x5a2 <__addsf3>
 2f2:	98 d3       	rcall	.+1840   	; 0xa24 <sqrt>
 2f4:	9b 01       	movw	r18, r22
 2f6:	ac 01       	movw	r20, r24
 2f8:	c5 01       	movw	r24, r10
 2fa:	b4 01       	movw	r22, r8
 2fc:	e2 d1       	rcall	.+964    	; 0x6c2 <__divsf3>
 2fe:	b5 d1       	rcall	.+874    	; 0x66a <atan>
 300:	90 58       	subi	r25, 0x80	; 128
 302:	2c e9       	ldi	r18, 0x9C	; 156
 304:	30 e3       	ldi	r19, 0x30	; 48
		//float roll = (atan(y/z)*180/3.1415); 
		float roll= -(atan(y/sqrt((x*x)+(z*z))))*(180/3.1415);
 306:	45 e6       	ldi	r20, 0x65	; 101
 308:	52 e4       	ldi	r21, 0x42	; 66
 30a:	25 d3       	rcall	.+1610   	; 0x956 <__mulsf3>
 30c:	2b 01       	movw	r4, r22
 30e:	3c 01       	movw	r6, r24
 310:	a5 01       	movw	r20, r10
 312:	94 01       	movw	r18, r8
 314:	c5 01       	movw	r24, r10
 316:	b4 01       	movw	r22, r8
 318:	1e d3       	rcall	.+1596   	; 0x956 <__mulsf3>
 31a:	29 81       	ldd	r18, Y+1	; 0x01
 31c:	3a 81       	ldd	r19, Y+2	; 0x02
 31e:	4b 81       	ldd	r20, Y+3	; 0x03
 320:	5c 81       	ldd	r21, Y+4	; 0x04
 322:	3f d1       	rcall	.+638    	; 0x5a2 <__addsf3>
 324:	7f d3       	rcall	.+1790   	; 0xa24 <sqrt>
 326:	9b 01       	movw	r18, r22
 328:	ac 01       	movw	r20, r24
 32a:	c7 01       	movw	r24, r14
 32c:	b6 01       	movw	r22, r12
 32e:	c9 d1       	rcall	.+914    	; 0x6c2 <__divsf3>
 330:	9c d1       	rcall	.+824    	; 0x66a <atan>
 332:	90 58       	subi	r25, 0x80	; 128
 334:	2c e9       	ldi	r18, 0x9C	; 156
 336:	30 e3       	ldi	r19, 0x30	; 48
//  		USART_Transmitchar('p',0);
//  		USART_TransmitFloat(pitch,0);
 // 		USART_Transmitchar('r',0);
//  		USART_TransmitFloat(roll,0);
		USART_Transmitchar(0x0D,0);
 338:	45 e6       	ldi	r20, 0x65	; 101
 33a:	52 e4       	ldi	r21, 0x42	; 66
 33c:	0c d3       	rcall	.+1560   	; 0x956 <__mulsf3>
 33e:	6b 01       	movw	r12, r22
					}
				}
			}
		}
		}*/
		if((pitch>-20 && pitch<20) && (roll>-20 && roll<20))
 340:	7c 01       	movw	r14, r24
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	8d e0       	ldi	r24, 0x0D	; 13
 346:	1e d1       	rcall	.+572    	; 0x584 <USART_Transmitchar>
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	40 ea       	ldi	r20, 0xA0	; 160
 34e:	51 ec       	ldi	r21, 0xC1	; 193
 350:	c3 01       	movw	r24, r6
 352:	b2 01       	movw	r22, r4
 354:	f5 d2       	rcall	.+1514   	; 0x940 <__gesf2>
 356:	18 16       	cp	r1, r24
 358:	fc f4       	brge	.+62     	; 0x398 <main+0xfe>
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	40 ea       	ldi	r20, 0xA0	; 160
 360:	51 e4       	ldi	r21, 0x41	; 65
 362:	c3 01       	movw	r24, r6
 364:	b2 01       	movw	r22, r4
 366:	a9 d1       	rcall	.+850    	; 0x6ba <__cmpsf2>
 368:	88 23       	and	r24, r24
 36a:	b4 f4       	brge	.+44     	; 0x398 <main+0xfe>
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	40 ea       	ldi	r20, 0xA0	; 160
 372:	51 ec       	ldi	r21, 0xC1	; 193
 374:	c7 01       	movw	r24, r14
 376:	b6 01       	movw	r22, r12
 378:	e3 d2       	rcall	.+1478   	; 0x940 <__gesf2>
 37a:	18 16       	cp	r1, r24
 37c:	6c f4       	brge	.+26     	; 0x398 <main+0xfe>
 37e:	20 e0       	ldi	r18, 0x00	; 0
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	40 ea       	ldi	r20, 0xA0	; 160
		{
			USART_Transmitchar('s',0);
 384:	51 e4       	ldi	r21, 0x41	; 65
 386:	c7 01       	movw	r24, r14
 388:	b6 01       	movw	r22, r12
		}
		else
		{

		if(pitch>0 && roll>0)
 38a:	97 d1       	rcall	.+814    	; 0x6ba <__cmpsf2>
 38c:	88 23       	and	r24, r24
 38e:	24 f4       	brge	.+8      	; 0x398 <main+0xfe>
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	83 e7       	ldi	r24, 0x73	; 115
 394:	f7 d0       	rcall	.+494    	; 0x584 <USART_Transmitchar>
 396:	6e c0       	rjmp	.+220    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	a9 01       	movw	r20, r18
 39e:	c3 01       	movw	r24, r6
 3a0:	b2 01       	movw	r22, r4
 3a2:	ce d2       	rcall	.+1436   	; 0x940 <__gesf2>
 3a4:	18 16       	cp	r1, r24
 3a6:	c4 f4       	brge	.+48     	; 0x3d8 <main+0x13e>
		{
			if(pitch>roll)
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	a9 01       	movw	r20, r18
 3ae:	c7 01       	movw	r24, r14
 3b0:	b6 01       	movw	r22, r12
 3b2:	c6 d2       	rcall	.+1420   	; 0x940 <__gesf2>
			{
				USART_Transmitchar('b',0);
 3b4:	18 16       	cp	r1, r24
 3b6:	0c f0       	brlt	.+2      	; 0x3ba <main+0x120>
 3b8:	67 c0       	rjmp	.+206    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 3ba:	a7 01       	movw	r20, r14
			}
			else
			{
				USART_Transmitchar('l',0);
 3bc:	96 01       	movw	r18, r12
 3be:	c3 01       	movw	r24, r6
 3c0:	b2 01       	movw	r22, r4
 3c2:	be d2       	rcall	.+1404   	; 0x940 <__gesf2>
			}
		}
		else if(pitch<0 && roll<0)
 3c4:	18 16       	cp	r1, r24
 3c6:	24 f4       	brge	.+8      	; 0x3d0 <main+0x136>
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	82 e6       	ldi	r24, 0x62	; 98
 3cc:	db d0       	rcall	.+438    	; 0x584 <USART_Transmitchar>
 3ce:	52 c0       	rjmp	.+164    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	8c e6       	ldi	r24, 0x6C	; 108
 3d4:	d7 d0       	rcall	.+430    	; 0x584 <USART_Transmitchar>
 3d6:	4e c0       	rjmp	.+156    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 3d8:	20 e0       	ldi	r18, 0x00	; 0
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	a9 01       	movw	r20, r18
 3de:	c3 01       	movw	r24, r6
 3e0:	b2 01       	movw	r22, r4
 3e2:	6b d1       	rcall	.+726    	; 0x6ba <__cmpsf2>
		{
			if(pitch>roll)
 3e4:	88 23       	and	r24, r24
 3e6:	bc f4       	brge	.+46     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	a9 01       	movw	r20, r18
 3ee:	c7 01       	movw	r24, r14
			{
				USART_Transmitchar('r',0);
 3f0:	b6 01       	movw	r22, r12
 3f2:	63 d1       	rcall	.+710    	; 0x6ba <__cmpsf2>
 3f4:	88 23       	and	r24, r24
			}
			else
			{
				USART_Transmitchar('f',0);
 3f6:	7c f4       	brge	.+30     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f8:	a7 01       	movw	r20, r14
 3fa:	96 01       	movw	r18, r12
 3fc:	c3 01       	movw	r24, r6
 3fe:	b2 01       	movw	r22, r4
			}
		}
		else if(pitch>0 && roll<0)
 400:	9f d2       	rcall	.+1342   	; 0x940 <__gesf2>
 402:	18 16       	cp	r1, r24
 404:	24 f4       	brge	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	82 e7       	ldi	r24, 0x72	; 114
 40a:	bc d0       	rcall	.+376    	; 0x584 <USART_Transmitchar>
 40c:	33 c0       	rjmp	.+102    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	86 e6       	ldi	r24, 0x66	; 102
 412:	b8 d0       	rcall	.+368    	; 0x584 <USART_Transmitchar>
 414:	2f c0       	rjmp	.+94     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 416:	20 e0       	ldi	r18, 0x00	; 0
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	a9 01       	movw	r20, r18
 41c:	c3 01       	movw	r24, r6
		{
			if(pitch>(-roll))
 41e:	b2 01       	movw	r22, r4
 420:	8f d2       	rcall	.+1310   	; 0x940 <__gesf2>
 422:	18 16       	cp	r1, r24
 424:	c4 f4       	brge	.+48     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	a9 01       	movw	r20, r18
 42c:	c7 01       	movw	r24, r14
			{
				USART_Transmitchar('b',0);
 42e:	b6 01       	movw	r22, r12
 430:	44 d1       	rcall	.+648    	; 0x6ba <__cmpsf2>
 432:	88 23       	and	r24, r24
 434:	84 f4       	brge	.+32     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 436:	a7 01       	movw	r20, r14
			}
			else
			{
				USART_Transmitchar('r',0);
 438:	96 01       	movw	r18, r12
 43a:	50 58       	subi	r21, 0x80	; 128
 43c:	c3 01       	movw	r24, r6
 43e:	b2 01       	movw	r22, r4
			}
		}
		else
		{
			if((-pitch)>roll)
 440:	7f d2       	rcall	.+1278   	; 0x940 <__gesf2>
 442:	18 16       	cp	r1, r24
 444:	24 f4       	brge	.+8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	82 e6       	ldi	r24, 0x62	; 98
 44a:	9c d0       	rcall	.+312    	; 0x584 <USART_Transmitchar>
 44c:	13 c0       	rjmp	.+38     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	82 e7       	ldi	r24, 0x72	; 114
			{
				USART_Transmitchar('f',0);
 452:	98 d0       	rcall	.+304    	; 0x584 <USART_Transmitchar>
 454:	0f c0       	rjmp	.+30     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 456:	a3 01       	movw	r20, r6
 458:	92 01       	movw	r18, r4
 45a:	50 58       	subi	r21, 0x80	; 128
			}
			else
			{
				USART_Transmitchar('l',0);
 45c:	c7 01       	movw	r24, r14
 45e:	b6 01       	movw	r22, r12
 460:	2c d1       	rcall	.+600    	; 0x6ba <__cmpsf2>
 462:	88 23       	and	r24, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 464:	24 f4       	brge	.+8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	86 e6       	ldi	r24, 0x66	; 102
 46a:	8c d0       	rcall	.+280    	; 0x584 <USART_Transmitchar>
 46c:	03 c0       	rjmp	.+6      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	8c e6       	ldi	r24, 0x6C	; 108
 472:	88 d0       	rcall	.+272    	; 0x584 <USART_Transmitchar>
 474:	2f ef       	ldi	r18, 0xFF	; 255
 476:	81 ee       	ldi	r24, 0xE1	; 225
			else
			{
				USART_Transmitchar('l',0);
			}
		}
		else if(pitch<0 && roll<0)
 478:	94 e0       	ldi	r25, 0x04	; 4
 47a:	21 50       	subi	r18, 0x01	; 1
 47c:	80 40       	sbci	r24, 0x00	; 0
 47e:	90 40       	sbci	r25, 0x00	; 0
 480:	e1 f7       	brne	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 484:	00 00       	nop
 486:	19 cf       	rjmp	.-462    	; 0x2ba <main+0x20>
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	a9 01       	movw	r20, r18
 48e:	c3 01       	movw	r24, r6
 490:	b2 01       	movw	r22, r4
 492:	13 d1       	rcall	.+550    	; 0x6ba <__cmpsf2>
 494:	88 23       	and	r24, r24
 496:	0c f0       	brlt	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 498:	c6 cf       	rjmp	.-116    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	a9 01       	movw	r20, r18
 4a0:	c7 01       	movw	r24, r14
 4a2:	b6 01       	movw	r22, r12
 4a4:	0a d1       	rcall	.+532    	; 0x6ba <__cmpsf2>
 4a6:	88 23       	and	r24, r24
 4a8:	0c f0       	brlt	.+2      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4aa:	bd cf       	rjmp	.-134    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 4ac:	a5 cf       	rjmp	.-182    	; 0x3f8 <main+0x15e>

000004ae <TWI_Init>:
	TWI_Send(DeviceAdrr);
	TWI_Send(RegisterAdrr);
	TWI_Start();
	TWI_Send(DeviceAdrr + 1);
	return TWI_ReadACK();
}
 4ae:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 4b2:	80 e2       	ldi	r24, 0x20	; 32
 4b4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 4b8:	08 95       	ret

000004ba <TWI_Start>:
 4ba:	84 ea       	ldi	r24, 0xA4	; 164
 4bc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 4c0:	e4 e7       	ldi	r30, 0x74	; 116
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	88 23       	and	r24, r24
 4c8:	ec f7       	brge	.-6      	; 0x4c4 <TWI_Start+0xa>
 4ca:	08 95       	ret

000004cc <TWI_Send>:
 4cc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 4d0:	84 e8       	ldi	r24, 0x84	; 132
 4d2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 4d6:	e4 e7       	ldi	r30, 0x74	; 116
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	88 23       	and	r24, r24
 4de:	ec f7       	brge	.-6      	; 0x4da <TWI_Send+0xe>
 4e0:	08 95       	ret

000004e2 <TWI_ReadNACK>:
 4e2:	84 e8       	ldi	r24, 0x84	; 132
 4e4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 4e8:	e4 e7       	ldi	r30, 0x74	; 116
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	88 23       	and	r24, r24
 4f0:	ec f7       	brge	.-6      	; 0x4ec <TWI_ReadNACK+0xa>
 4f2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 4f6:	94 e9       	ldi	r25, 0x94	; 148
 4f8:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 4fc:	08 95       	ret

000004fe <TWI_WriteRegister>:
 4fe:	1f 93       	push	r17
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	18 2f       	mov	r17, r24
 506:	d6 2f       	mov	r29, r22
 508:	c4 2f       	mov	r28, r20
 50a:	d7 df       	rcall	.-82     	; 0x4ba <TWI_Start>
 50c:	81 2f       	mov	r24, r17
 50e:	de df       	rcall	.-68     	; 0x4cc <TWI_Send>
 510:	8d 2f       	mov	r24, r29
 512:	dc df       	rcall	.-72     	; 0x4cc <TWI_Send>
 514:	8c 2f       	mov	r24, r28
 516:	da df       	rcall	.-76     	; 0x4cc <TWI_Send>
 518:	84 e9       	ldi	r24, 0x94	; 148
 51a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	1f 91       	pop	r17
 524:	08 95       	ret

00000526 <TWI_ReadRegisterNACK>:

uint8_t TWI_ReadRegisterNACK(uint8_t DeviceAdrr , uint8_t RegisterAdrr)
{
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	c8 2f       	mov	r28, r24
	
	TWI_Start();
	TWI_Send(DeviceAdrr);
	TWI_Send(RegisterAdrr);
 52c:	d6 2f       	mov	r29, r22
	//TWI_Stop();
	TWI_Start();
	TWI_Send(DeviceAdrr + 1);
 52e:	c5 df       	rcall	.-118    	; 0x4ba <TWI_Start>
 530:	8c 2f       	mov	r24, r28
 532:	cc df       	rcall	.-104    	; 0x4cc <TWI_Send>
 534:	8d 2f       	mov	r24, r29
	return TWI_ReadNACK();
 536:	ca df       	rcall	.-108    	; 0x4cc <TWI_Send>
 538:	c0 df       	rcall	.-128    	; 0x4ba <TWI_Start>
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	8c 0f       	add	r24, r28
 53e:	c6 df       	rcall	.-116    	; 0x4cc <TWI_Send>
 540:	d0 df       	rcall	.-96     	; 0x4e2 <TWI_ReadNACK>
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <USART_Init>:
{
	if(n)
	{
		UCSR1B|=(1<<RXCIE1);
	}
	else UCSR0B|=(1<<RXCIE0);
 548:	78 94       	sei
 54a:	66 23       	and	r22, r22
 54c:	79 f0       	breq	.+30     	; 0x56c <USART_Init+0x24>
 54e:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 552:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 556:	ea e9       	ldi	r30, 0x9A	; 154
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	88 61       	ori	r24, 0x18	; 24
 55e:	80 83       	st	Z, r24
 560:	ed e9       	ldi	r30, 0x9D	; 157
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	86 60       	ori	r24, 0x06	; 6
 568:	80 83       	st	Z, r24
 56a:	08 95       	ret
 56c:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 570:	89 b9       	out	0x09, r24	; 9
 572:	8a b1       	in	r24, 0x0a	; 10
 574:	88 61       	ori	r24, 0x18	; 24
 576:	8a b9       	out	0x0a, r24	; 10
 578:	e5 e9       	ldi	r30, 0x95	; 149
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	80 81       	ld	r24, Z
 57e:	86 60       	ori	r24, 0x06	; 6
 580:	80 83       	st	Z, r24
 582:	08 95       	ret

00000584 <USART_Transmitchar>:
}

void USART_Transmitchar( unsigned char data, uint8_t n )
{
	if(n)
 584:	66 23       	and	r22, r22
 586:	41 f0       	breq	.+16     	; 0x598 <USART_Transmitchar+0x14>
	{
		while ( !( UCSR1A & (1<<UDRE1)) );
 588:	eb e9       	ldi	r30, 0x9B	; 155
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	90 81       	ld	r25, Z
 58e:	95 ff       	sbrs	r25, 5
 590:	fd cf       	rjmp	.-6      	; 0x58c <USART_Transmitchar+0x8>
		UDR1=data;
 592:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 596:	08 95       	ret
	}else
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
 598:	5d 9b       	sbis	0x0b, 5	; 11
 59a:	fe cf       	rjmp	.-4      	; 0x598 <USART_Transmitchar+0x14>
		UDR0=data;
 59c:	8c b9       	out	0x0c, r24	; 12
 59e:	08 95       	ret

000005a0 <__subsf3>:
 5a0:	50 58       	subi	r21, 0x80	; 128

000005a2 <__addsf3>:
 5a2:	bb 27       	eor	r27, r27
 5a4:	aa 27       	eor	r26, r26
 5a6:	0e d0       	rcall	.+28     	; 0x5c4 <__addsf3x>
 5a8:	91 c1       	rjmp	.+802    	; 0x8cc <__fp_round>
 5aa:	82 d1       	rcall	.+772    	; 0x8b0 <__fp_pscA>
 5ac:	30 f0       	brcs	.+12     	; 0x5ba <__addsf3+0x18>
 5ae:	87 d1       	rcall	.+782    	; 0x8be <__fp_pscB>
 5b0:	20 f0       	brcs	.+8      	; 0x5ba <__addsf3+0x18>
 5b2:	31 f4       	brne	.+12     	; 0x5c0 <__addsf3+0x1e>
 5b4:	9f 3f       	cpi	r25, 0xFF	; 255
 5b6:	11 f4       	brne	.+4      	; 0x5bc <__addsf3+0x1a>
 5b8:	1e f4       	brtc	.+6      	; 0x5c0 <__addsf3+0x1e>
 5ba:	52 c1       	rjmp	.+676    	; 0x860 <__fp_nan>
 5bc:	0e f4       	brtc	.+2      	; 0x5c0 <__addsf3+0x1e>
 5be:	e0 95       	com	r30
 5c0:	e7 fb       	bst	r30, 7
 5c2:	48 c1       	rjmp	.+656    	; 0x854 <__fp_inf>

000005c4 <__addsf3x>:
 5c4:	e9 2f       	mov	r30, r25
 5c6:	93 d1       	rcall	.+806    	; 0x8ee <__fp_split3>
 5c8:	80 f3       	brcs	.-32     	; 0x5aa <__addsf3+0x8>
 5ca:	ba 17       	cp	r27, r26
 5cc:	62 07       	cpc	r22, r18
 5ce:	73 07       	cpc	r23, r19
 5d0:	84 07       	cpc	r24, r20
 5d2:	95 07       	cpc	r25, r21
 5d4:	18 f0       	brcs	.+6      	; 0x5dc <__addsf3x+0x18>
 5d6:	71 f4       	brne	.+28     	; 0x5f4 <__addsf3x+0x30>
 5d8:	9e f5       	brtc	.+102    	; 0x640 <__addsf3x+0x7c>
 5da:	ab c1       	rjmp	.+854    	; 0x932 <__fp_zero>
 5dc:	0e f4       	brtc	.+2      	; 0x5e0 <__addsf3x+0x1c>
 5de:	e0 95       	com	r30
 5e0:	0b 2e       	mov	r0, r27
 5e2:	ba 2f       	mov	r27, r26
 5e4:	a0 2d       	mov	r26, r0
 5e6:	0b 01       	movw	r0, r22
 5e8:	b9 01       	movw	r22, r18
 5ea:	90 01       	movw	r18, r0
 5ec:	0c 01       	movw	r0, r24
 5ee:	ca 01       	movw	r24, r20
 5f0:	a0 01       	movw	r20, r0
 5f2:	11 24       	eor	r1, r1
 5f4:	ff 27       	eor	r31, r31
 5f6:	59 1b       	sub	r21, r25
 5f8:	99 f0       	breq	.+38     	; 0x620 <__addsf3x+0x5c>
 5fa:	59 3f       	cpi	r21, 0xF9	; 249
 5fc:	50 f4       	brcc	.+20     	; 0x612 <__addsf3x+0x4e>
 5fe:	50 3e       	cpi	r21, 0xE0	; 224
 600:	68 f1       	brcs	.+90     	; 0x65c <__addsf3x+0x98>
 602:	1a 16       	cp	r1, r26
 604:	f0 40       	sbci	r31, 0x00	; 0
 606:	a2 2f       	mov	r26, r18
 608:	23 2f       	mov	r18, r19
 60a:	34 2f       	mov	r19, r20
 60c:	44 27       	eor	r20, r20
 60e:	58 5f       	subi	r21, 0xF8	; 248
 610:	f3 cf       	rjmp	.-26     	; 0x5f8 <__addsf3x+0x34>
 612:	46 95       	lsr	r20
 614:	37 95       	ror	r19
 616:	27 95       	ror	r18
 618:	a7 95       	ror	r26
 61a:	f0 40       	sbci	r31, 0x00	; 0
 61c:	53 95       	inc	r21
 61e:	c9 f7       	brne	.-14     	; 0x612 <__addsf3x+0x4e>
 620:	7e f4       	brtc	.+30     	; 0x640 <__addsf3x+0x7c>
 622:	1f 16       	cp	r1, r31
 624:	ba 0b       	sbc	r27, r26
 626:	62 0b       	sbc	r22, r18
 628:	73 0b       	sbc	r23, r19
 62a:	84 0b       	sbc	r24, r20
 62c:	ba f0       	brmi	.+46     	; 0x65c <__addsf3x+0x98>
 62e:	91 50       	subi	r25, 0x01	; 1
 630:	a1 f0       	breq	.+40     	; 0x65a <__addsf3x+0x96>
 632:	ff 0f       	add	r31, r31
 634:	bb 1f       	adc	r27, r27
 636:	66 1f       	adc	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	88 1f       	adc	r24, r24
 63c:	c2 f7       	brpl	.-16     	; 0x62e <__addsf3x+0x6a>
 63e:	0e c0       	rjmp	.+28     	; 0x65c <__addsf3x+0x98>
 640:	ba 0f       	add	r27, r26
 642:	62 1f       	adc	r22, r18
 644:	73 1f       	adc	r23, r19
 646:	84 1f       	adc	r24, r20
 648:	48 f4       	brcc	.+18     	; 0x65c <__addsf3x+0x98>
 64a:	87 95       	ror	r24
 64c:	77 95       	ror	r23
 64e:	67 95       	ror	r22
 650:	b7 95       	ror	r27
 652:	f7 95       	ror	r31
 654:	9e 3f       	cpi	r25, 0xFE	; 254
 656:	08 f0       	brcs	.+2      	; 0x65a <__addsf3x+0x96>
 658:	b3 cf       	rjmp	.-154    	; 0x5c0 <__addsf3+0x1e>
 65a:	93 95       	inc	r25
 65c:	88 0f       	add	r24, r24
 65e:	08 f0       	brcs	.+2      	; 0x662 <__addsf3x+0x9e>
 660:	99 27       	eor	r25, r25
 662:	ee 0f       	add	r30, r30
 664:	97 95       	ror	r25
 666:	87 95       	ror	r24
 668:	08 95       	ret

0000066a <atan>:
 66a:	df 93       	push	r29
 66c:	dd 27       	eor	r29, r29
 66e:	b9 2f       	mov	r27, r25
 670:	bf 77       	andi	r27, 0x7F	; 127
 672:	40 e8       	ldi	r20, 0x80	; 128
 674:	5f e3       	ldi	r21, 0x3F	; 63
 676:	16 16       	cp	r1, r22
 678:	17 06       	cpc	r1, r23
 67a:	48 07       	cpc	r20, r24
 67c:	5b 07       	cpc	r21, r27
 67e:	10 f4       	brcc	.+4      	; 0x684 <atan+0x1a>
 680:	d9 2f       	mov	r29, r25
 682:	62 d1       	rcall	.+708    	; 0x948 <inverse>
 684:	9f 93       	push	r25
 686:	8f 93       	push	r24
 688:	7f 93       	push	r23
 68a:	6f 93       	push	r22
 68c:	09 d2       	rcall	.+1042   	; 0xaa0 <square>
 68e:	ec e8       	ldi	r30, 0x8C	; 140
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	e9 d0       	rcall	.+466    	; 0x866 <__fp_powser>
 694:	1b d1       	rcall	.+566    	; 0x8cc <__fp_round>
 696:	2f 91       	pop	r18
 698:	3f 91       	pop	r19
 69a:	4f 91       	pop	r20
 69c:	5f 91       	pop	r21
 69e:	67 d1       	rcall	.+718    	; 0x96e <__mulsf3x>
 6a0:	dd 23       	and	r29, r29
 6a2:	49 f0       	breq	.+18     	; 0x6b6 <atan+0x4c>
 6a4:	90 58       	subi	r25, 0x80	; 128
 6a6:	a2 ea       	ldi	r26, 0xA2	; 162
 6a8:	2a ed       	ldi	r18, 0xDA	; 218
 6aa:	3f e0       	ldi	r19, 0x0F	; 15
 6ac:	49 ec       	ldi	r20, 0xC9	; 201
 6ae:	5f e3       	ldi	r21, 0x3F	; 63
 6b0:	d0 78       	andi	r29, 0x80	; 128
 6b2:	5d 27       	eor	r21, r29
 6b4:	87 df       	rcall	.-242    	; 0x5c4 <__addsf3x>
 6b6:	df 91       	pop	r29
 6b8:	09 c1       	rjmp	.+530    	; 0x8cc <__fp_round>

000006ba <__cmpsf2>:
 6ba:	a8 d0       	rcall	.+336    	; 0x80c <__fp_cmp>
 6bc:	08 f4       	brcc	.+2      	; 0x6c0 <__cmpsf2+0x6>
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	08 95       	ret

000006c2 <__divsf3>:
 6c2:	0c d0       	rcall	.+24     	; 0x6dc <__divsf3x>
 6c4:	03 c1       	rjmp	.+518    	; 0x8cc <__fp_round>
 6c6:	fb d0       	rcall	.+502    	; 0x8be <__fp_pscB>
 6c8:	40 f0       	brcs	.+16     	; 0x6da <__divsf3+0x18>
 6ca:	f2 d0       	rcall	.+484    	; 0x8b0 <__fp_pscA>
 6cc:	30 f0       	brcs	.+12     	; 0x6da <__divsf3+0x18>
 6ce:	21 f4       	brne	.+8      	; 0x6d8 <__divsf3+0x16>
 6d0:	5f 3f       	cpi	r21, 0xFF	; 255
 6d2:	19 f0       	breq	.+6      	; 0x6da <__divsf3+0x18>
 6d4:	bf c0       	rjmp	.+382    	; 0x854 <__fp_inf>
 6d6:	51 11       	cpse	r21, r1
 6d8:	2d c1       	rjmp	.+602    	; 0x934 <__fp_szero>
 6da:	c2 c0       	rjmp	.+388    	; 0x860 <__fp_nan>

000006dc <__divsf3x>:
 6dc:	08 d1       	rcall	.+528    	; 0x8ee <__fp_split3>
 6de:	98 f3       	brcs	.-26     	; 0x6c6 <__divsf3+0x4>

000006e0 <__divsf3_pse>:
 6e0:	99 23       	and	r25, r25
 6e2:	c9 f3       	breq	.-14     	; 0x6d6 <__divsf3+0x14>
 6e4:	55 23       	and	r21, r21
 6e6:	b1 f3       	breq	.-20     	; 0x6d4 <__divsf3+0x12>
 6e8:	95 1b       	sub	r25, r21
 6ea:	55 0b       	sbc	r21, r21
 6ec:	bb 27       	eor	r27, r27
 6ee:	aa 27       	eor	r26, r26
 6f0:	62 17       	cp	r22, r18
 6f2:	73 07       	cpc	r23, r19
 6f4:	84 07       	cpc	r24, r20
 6f6:	38 f0       	brcs	.+14     	; 0x706 <__divsf3_pse+0x26>
 6f8:	9f 5f       	subi	r25, 0xFF	; 255
 6fa:	5f 4f       	sbci	r21, 0xFF	; 255
 6fc:	22 0f       	add	r18, r18
 6fe:	33 1f       	adc	r19, r19
 700:	44 1f       	adc	r20, r20
 702:	aa 1f       	adc	r26, r26
 704:	a9 f3       	breq	.-22     	; 0x6f0 <__divsf3_pse+0x10>
 706:	33 d0       	rcall	.+102    	; 0x76e <__divsf3_pse+0x8e>
 708:	0e 2e       	mov	r0, r30
 70a:	3a f0       	brmi	.+14     	; 0x71a <__divsf3_pse+0x3a>
 70c:	e0 e8       	ldi	r30, 0x80	; 128
 70e:	30 d0       	rcall	.+96     	; 0x770 <__divsf3_pse+0x90>
 710:	91 50       	subi	r25, 0x01	; 1
 712:	50 40       	sbci	r21, 0x00	; 0
 714:	e6 95       	lsr	r30
 716:	00 1c       	adc	r0, r0
 718:	ca f7       	brpl	.-14     	; 0x70c <__divsf3_pse+0x2c>
 71a:	29 d0       	rcall	.+82     	; 0x76e <__divsf3_pse+0x8e>
 71c:	fe 2f       	mov	r31, r30
 71e:	27 d0       	rcall	.+78     	; 0x76e <__divsf3_pse+0x8e>
 720:	66 0f       	add	r22, r22
 722:	77 1f       	adc	r23, r23
 724:	88 1f       	adc	r24, r24
 726:	bb 1f       	adc	r27, r27
 728:	26 17       	cp	r18, r22
 72a:	37 07       	cpc	r19, r23
 72c:	48 07       	cpc	r20, r24
 72e:	ab 07       	cpc	r26, r27
 730:	b0 e8       	ldi	r27, 0x80	; 128
 732:	09 f0       	breq	.+2      	; 0x736 <__divsf3_pse+0x56>
 734:	bb 0b       	sbc	r27, r27
 736:	80 2d       	mov	r24, r0
 738:	bf 01       	movw	r22, r30
 73a:	ff 27       	eor	r31, r31
 73c:	93 58       	subi	r25, 0x83	; 131
 73e:	5f 4f       	sbci	r21, 0xFF	; 255
 740:	2a f0       	brmi	.+10     	; 0x74c <__divsf3_pse+0x6c>
 742:	9e 3f       	cpi	r25, 0xFE	; 254
 744:	51 05       	cpc	r21, r1
 746:	68 f0       	brcs	.+26     	; 0x762 <__divsf3_pse+0x82>
 748:	85 c0       	rjmp	.+266    	; 0x854 <__fp_inf>
 74a:	f4 c0       	rjmp	.+488    	; 0x934 <__fp_szero>
 74c:	5f 3f       	cpi	r21, 0xFF	; 255
 74e:	ec f3       	brlt	.-6      	; 0x74a <__divsf3_pse+0x6a>
 750:	98 3e       	cpi	r25, 0xE8	; 232
 752:	dc f3       	brlt	.-10     	; 0x74a <__divsf3_pse+0x6a>
 754:	86 95       	lsr	r24
 756:	77 95       	ror	r23
 758:	67 95       	ror	r22
 75a:	b7 95       	ror	r27
 75c:	f7 95       	ror	r31
 75e:	9f 5f       	subi	r25, 0xFF	; 255
 760:	c9 f7       	brne	.-14     	; 0x754 <__divsf3_pse+0x74>
 762:	88 0f       	add	r24, r24
 764:	91 1d       	adc	r25, r1
 766:	96 95       	lsr	r25
 768:	87 95       	ror	r24
 76a:	97 f9       	bld	r25, 7
 76c:	08 95       	ret
 76e:	e1 e0       	ldi	r30, 0x01	; 1
 770:	66 0f       	add	r22, r22
 772:	77 1f       	adc	r23, r23
 774:	88 1f       	adc	r24, r24
 776:	bb 1f       	adc	r27, r27
 778:	62 17       	cp	r22, r18
 77a:	73 07       	cpc	r23, r19
 77c:	84 07       	cpc	r24, r20
 77e:	ba 07       	cpc	r27, r26
 780:	20 f0       	brcs	.+8      	; 0x78a <__divsf3_pse+0xaa>
 782:	62 1b       	sub	r22, r18
 784:	73 0b       	sbc	r23, r19
 786:	84 0b       	sbc	r24, r20
 788:	ba 0b       	sbc	r27, r26
 78a:	ee 1f       	adc	r30, r30
 78c:	88 f7       	brcc	.-30     	; 0x770 <__divsf3_pse+0x90>
 78e:	e0 95       	com	r30
 790:	08 95       	ret

00000792 <__floatunsisf>:
 792:	e8 94       	clt
 794:	09 c0       	rjmp	.+18     	; 0x7a8 <__floatsisf+0x12>

00000796 <__floatsisf>:
 796:	97 fb       	bst	r25, 7
 798:	3e f4       	brtc	.+14     	; 0x7a8 <__floatsisf+0x12>
 79a:	90 95       	com	r25
 79c:	80 95       	com	r24
 79e:	70 95       	com	r23
 7a0:	61 95       	neg	r22
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	8f 4f       	sbci	r24, 0xFF	; 255
 7a6:	9f 4f       	sbci	r25, 0xFF	; 255
 7a8:	99 23       	and	r25, r25
 7aa:	a9 f0       	breq	.+42     	; 0x7d6 <__floatsisf+0x40>
 7ac:	f9 2f       	mov	r31, r25
 7ae:	96 e9       	ldi	r25, 0x96	; 150
 7b0:	bb 27       	eor	r27, r27
 7b2:	93 95       	inc	r25
 7b4:	f6 95       	lsr	r31
 7b6:	87 95       	ror	r24
 7b8:	77 95       	ror	r23
 7ba:	67 95       	ror	r22
 7bc:	b7 95       	ror	r27
 7be:	f1 11       	cpse	r31, r1
 7c0:	f8 cf       	rjmp	.-16     	; 0x7b2 <__floatsisf+0x1c>
 7c2:	fa f4       	brpl	.+62     	; 0x802 <__floatsisf+0x6c>
 7c4:	bb 0f       	add	r27, r27
 7c6:	11 f4       	brne	.+4      	; 0x7cc <__floatsisf+0x36>
 7c8:	60 ff       	sbrs	r22, 0
 7ca:	1b c0       	rjmp	.+54     	; 0x802 <__floatsisf+0x6c>
 7cc:	6f 5f       	subi	r22, 0xFF	; 255
 7ce:	7f 4f       	sbci	r23, 0xFF	; 255
 7d0:	8f 4f       	sbci	r24, 0xFF	; 255
 7d2:	9f 4f       	sbci	r25, 0xFF	; 255
 7d4:	16 c0       	rjmp	.+44     	; 0x802 <__floatsisf+0x6c>
 7d6:	88 23       	and	r24, r24
 7d8:	11 f0       	breq	.+4      	; 0x7de <__floatsisf+0x48>
 7da:	96 e9       	ldi	r25, 0x96	; 150
 7dc:	11 c0       	rjmp	.+34     	; 0x800 <__floatsisf+0x6a>
 7de:	77 23       	and	r23, r23
 7e0:	21 f0       	breq	.+8      	; 0x7ea <__floatsisf+0x54>
 7e2:	9e e8       	ldi	r25, 0x8E	; 142
 7e4:	87 2f       	mov	r24, r23
 7e6:	76 2f       	mov	r23, r22
 7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <__floatsisf+0x5e>
 7ea:	66 23       	and	r22, r22
 7ec:	71 f0       	breq	.+28     	; 0x80a <__floatsisf+0x74>
 7ee:	96 e8       	ldi	r25, 0x86	; 134
 7f0:	86 2f       	mov	r24, r22
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	60 e0       	ldi	r22, 0x00	; 0
 7f6:	2a f0       	brmi	.+10     	; 0x802 <__floatsisf+0x6c>
 7f8:	9a 95       	dec	r25
 7fa:	66 0f       	add	r22, r22
 7fc:	77 1f       	adc	r23, r23
 7fe:	88 1f       	adc	r24, r24
 800:	da f7       	brpl	.-10     	; 0x7f8 <__floatsisf+0x62>
 802:	88 0f       	add	r24, r24
 804:	96 95       	lsr	r25
 806:	87 95       	ror	r24
 808:	97 f9       	bld	r25, 7
 80a:	08 95       	ret

0000080c <__fp_cmp>:
 80c:	99 0f       	add	r25, r25
 80e:	00 08       	sbc	r0, r0
 810:	55 0f       	add	r21, r21
 812:	aa 0b       	sbc	r26, r26
 814:	e0 e8       	ldi	r30, 0x80	; 128
 816:	fe ef       	ldi	r31, 0xFE	; 254
 818:	16 16       	cp	r1, r22
 81a:	17 06       	cpc	r1, r23
 81c:	e8 07       	cpc	r30, r24
 81e:	f9 07       	cpc	r31, r25
 820:	c0 f0       	brcs	.+48     	; 0x852 <__fp_cmp+0x46>
 822:	12 16       	cp	r1, r18
 824:	13 06       	cpc	r1, r19
 826:	e4 07       	cpc	r30, r20
 828:	f5 07       	cpc	r31, r21
 82a:	98 f0       	brcs	.+38     	; 0x852 <__fp_cmp+0x46>
 82c:	62 1b       	sub	r22, r18
 82e:	73 0b       	sbc	r23, r19
 830:	84 0b       	sbc	r24, r20
 832:	95 0b       	sbc	r25, r21
 834:	39 f4       	brne	.+14     	; 0x844 <__fp_cmp+0x38>
 836:	0a 26       	eor	r0, r26
 838:	61 f0       	breq	.+24     	; 0x852 <__fp_cmp+0x46>
 83a:	23 2b       	or	r18, r19
 83c:	24 2b       	or	r18, r20
 83e:	25 2b       	or	r18, r21
 840:	21 f4       	brne	.+8      	; 0x84a <__fp_cmp+0x3e>
 842:	08 95       	ret
 844:	0a 26       	eor	r0, r26
 846:	09 f4       	brne	.+2      	; 0x84a <__fp_cmp+0x3e>
 848:	a1 40       	sbci	r26, 0x01	; 1
 84a:	a6 95       	lsr	r26
 84c:	8f ef       	ldi	r24, 0xFF	; 255
 84e:	81 1d       	adc	r24, r1
 850:	81 1d       	adc	r24, r1
 852:	08 95       	ret

00000854 <__fp_inf>:
 854:	97 f9       	bld	r25, 7
 856:	9f 67       	ori	r25, 0x7F	; 127
 858:	80 e8       	ldi	r24, 0x80	; 128
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	08 95       	ret

00000860 <__fp_nan>:
 860:	9f ef       	ldi	r25, 0xFF	; 255
 862:	80 ec       	ldi	r24, 0xC0	; 192
 864:	08 95       	ret

00000866 <__fp_powser>:
 866:	df 93       	push	r29
 868:	cf 93       	push	r28
 86a:	1f 93       	push	r17
 86c:	0f 93       	push	r16
 86e:	ff 92       	push	r15
 870:	ef 92       	push	r14
 872:	df 92       	push	r13
 874:	7b 01       	movw	r14, r22
 876:	8c 01       	movw	r16, r24
 878:	68 94       	set
 87a:	05 c0       	rjmp	.+10     	; 0x886 <__fp_powser+0x20>
 87c:	da 2e       	mov	r13, r26
 87e:	ef 01       	movw	r28, r30
 880:	76 d0       	rcall	.+236    	; 0x96e <__mulsf3x>
 882:	fe 01       	movw	r30, r28
 884:	e8 94       	clt
 886:	a5 91       	lpm	r26, Z+
 888:	25 91       	lpm	r18, Z+
 88a:	35 91       	lpm	r19, Z+
 88c:	45 91       	lpm	r20, Z+
 88e:	55 91       	lpm	r21, Z+
 890:	ae f3       	brts	.-22     	; 0x87c <__fp_powser+0x16>
 892:	ef 01       	movw	r28, r30
 894:	97 de       	rcall	.-722    	; 0x5c4 <__addsf3x>
 896:	fe 01       	movw	r30, r28
 898:	97 01       	movw	r18, r14
 89a:	a8 01       	movw	r20, r16
 89c:	da 94       	dec	r13
 89e:	79 f7       	brne	.-34     	; 0x87e <__fp_powser+0x18>
 8a0:	df 90       	pop	r13
 8a2:	ef 90       	pop	r14
 8a4:	ff 90       	pop	r15
 8a6:	0f 91       	pop	r16
 8a8:	1f 91       	pop	r17
 8aa:	cf 91       	pop	r28
 8ac:	df 91       	pop	r29
 8ae:	08 95       	ret

000008b0 <__fp_pscA>:
 8b0:	00 24       	eor	r0, r0
 8b2:	0a 94       	dec	r0
 8b4:	16 16       	cp	r1, r22
 8b6:	17 06       	cpc	r1, r23
 8b8:	18 06       	cpc	r1, r24
 8ba:	09 06       	cpc	r0, r25
 8bc:	08 95       	ret

000008be <__fp_pscB>:
 8be:	00 24       	eor	r0, r0
 8c0:	0a 94       	dec	r0
 8c2:	12 16       	cp	r1, r18
 8c4:	13 06       	cpc	r1, r19
 8c6:	14 06       	cpc	r1, r20
 8c8:	05 06       	cpc	r0, r21
 8ca:	08 95       	ret

000008cc <__fp_round>:
 8cc:	09 2e       	mov	r0, r25
 8ce:	03 94       	inc	r0
 8d0:	00 0c       	add	r0, r0
 8d2:	11 f4       	brne	.+4      	; 0x8d8 <__fp_round+0xc>
 8d4:	88 23       	and	r24, r24
 8d6:	52 f0       	brmi	.+20     	; 0x8ec <__fp_round+0x20>
 8d8:	bb 0f       	add	r27, r27
 8da:	40 f4       	brcc	.+16     	; 0x8ec <__fp_round+0x20>
 8dc:	bf 2b       	or	r27, r31
 8de:	11 f4       	brne	.+4      	; 0x8e4 <__fp_round+0x18>
 8e0:	60 ff       	sbrs	r22, 0
 8e2:	04 c0       	rjmp	.+8      	; 0x8ec <__fp_round+0x20>
 8e4:	6f 5f       	subi	r22, 0xFF	; 255
 8e6:	7f 4f       	sbci	r23, 0xFF	; 255
 8e8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	08 95       	ret

000008ee <__fp_split3>:
 8ee:	57 fd       	sbrc	r21, 7
 8f0:	90 58       	subi	r25, 0x80	; 128
 8f2:	44 0f       	add	r20, r20
 8f4:	55 1f       	adc	r21, r21
 8f6:	59 f0       	breq	.+22     	; 0x90e <__fp_splitA+0x10>
 8f8:	5f 3f       	cpi	r21, 0xFF	; 255
 8fa:	71 f0       	breq	.+28     	; 0x918 <__fp_splitA+0x1a>
 8fc:	47 95       	ror	r20

000008fe <__fp_splitA>:
 8fe:	88 0f       	add	r24, r24
 900:	97 fb       	bst	r25, 7
 902:	99 1f       	adc	r25, r25
 904:	61 f0       	breq	.+24     	; 0x91e <__fp_splitA+0x20>
 906:	9f 3f       	cpi	r25, 0xFF	; 255
 908:	79 f0       	breq	.+30     	; 0x928 <__fp_splitA+0x2a>
 90a:	87 95       	ror	r24
 90c:	08 95       	ret
 90e:	12 16       	cp	r1, r18
 910:	13 06       	cpc	r1, r19
 912:	14 06       	cpc	r1, r20
 914:	55 1f       	adc	r21, r21
 916:	f2 cf       	rjmp	.-28     	; 0x8fc <__fp_split3+0xe>
 918:	46 95       	lsr	r20
 91a:	f1 df       	rcall	.-30     	; 0x8fe <__fp_splitA>
 91c:	08 c0       	rjmp	.+16     	; 0x92e <__fp_splitA+0x30>
 91e:	16 16       	cp	r1, r22
 920:	17 06       	cpc	r1, r23
 922:	18 06       	cpc	r1, r24
 924:	99 1f       	adc	r25, r25
 926:	f1 cf       	rjmp	.-30     	; 0x90a <__fp_splitA+0xc>
 928:	86 95       	lsr	r24
 92a:	71 05       	cpc	r23, r1
 92c:	61 05       	cpc	r22, r1
 92e:	08 94       	sec
 930:	08 95       	ret

00000932 <__fp_zero>:
 932:	e8 94       	clt

00000934 <__fp_szero>:
 934:	bb 27       	eor	r27, r27
 936:	66 27       	eor	r22, r22
 938:	77 27       	eor	r23, r23
 93a:	cb 01       	movw	r24, r22
 93c:	97 f9       	bld	r25, 7
 93e:	08 95       	ret

00000940 <__gesf2>:
 940:	65 df       	rcall	.-310    	; 0x80c <__fp_cmp>
 942:	08 f4       	brcc	.+2      	; 0x946 <__gesf2+0x6>
 944:	8f ef       	ldi	r24, 0xFF	; 255
 946:	08 95       	ret

00000948 <inverse>:
 948:	9b 01       	movw	r18, r22
 94a:	ac 01       	movw	r20, r24
 94c:	60 e0       	ldi	r22, 0x00	; 0
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	80 e8       	ldi	r24, 0x80	; 128
 952:	9f e3       	ldi	r25, 0x3F	; 63
 954:	b6 ce       	rjmp	.-660    	; 0x6c2 <__divsf3>

00000956 <__mulsf3>:
 956:	0b d0       	rcall	.+22     	; 0x96e <__mulsf3x>
 958:	b9 cf       	rjmp	.-142    	; 0x8cc <__fp_round>
 95a:	aa df       	rcall	.-172    	; 0x8b0 <__fp_pscA>
 95c:	28 f0       	brcs	.+10     	; 0x968 <__mulsf3+0x12>
 95e:	af df       	rcall	.-162    	; 0x8be <__fp_pscB>
 960:	18 f0       	brcs	.+6      	; 0x968 <__mulsf3+0x12>
 962:	95 23       	and	r25, r21
 964:	09 f0       	breq	.+2      	; 0x968 <__mulsf3+0x12>
 966:	76 cf       	rjmp	.-276    	; 0x854 <__fp_inf>
 968:	7b cf       	rjmp	.-266    	; 0x860 <__fp_nan>
 96a:	11 24       	eor	r1, r1
 96c:	e3 cf       	rjmp	.-58     	; 0x934 <__fp_szero>

0000096e <__mulsf3x>:
 96e:	bf df       	rcall	.-130    	; 0x8ee <__fp_split3>
 970:	a0 f3       	brcs	.-24     	; 0x95a <__mulsf3+0x4>

00000972 <__mulsf3_pse>:
 972:	95 9f       	mul	r25, r21
 974:	d1 f3       	breq	.-12     	; 0x96a <__mulsf3+0x14>
 976:	95 0f       	add	r25, r21
 978:	50 e0       	ldi	r21, 0x00	; 0
 97a:	55 1f       	adc	r21, r21
 97c:	62 9f       	mul	r22, r18
 97e:	f0 01       	movw	r30, r0
 980:	72 9f       	mul	r23, r18
 982:	bb 27       	eor	r27, r27
 984:	f0 0d       	add	r31, r0
 986:	b1 1d       	adc	r27, r1
 988:	63 9f       	mul	r22, r19
 98a:	aa 27       	eor	r26, r26
 98c:	f0 0d       	add	r31, r0
 98e:	b1 1d       	adc	r27, r1
 990:	aa 1f       	adc	r26, r26
 992:	64 9f       	mul	r22, r20
 994:	66 27       	eor	r22, r22
 996:	b0 0d       	add	r27, r0
 998:	a1 1d       	adc	r26, r1
 99a:	66 1f       	adc	r22, r22
 99c:	82 9f       	mul	r24, r18
 99e:	22 27       	eor	r18, r18
 9a0:	b0 0d       	add	r27, r0
 9a2:	a1 1d       	adc	r26, r1
 9a4:	62 1f       	adc	r22, r18
 9a6:	73 9f       	mul	r23, r19
 9a8:	b0 0d       	add	r27, r0
 9aa:	a1 1d       	adc	r26, r1
 9ac:	62 1f       	adc	r22, r18
 9ae:	83 9f       	mul	r24, r19
 9b0:	a0 0d       	add	r26, r0
 9b2:	61 1d       	adc	r22, r1
 9b4:	22 1f       	adc	r18, r18
 9b6:	74 9f       	mul	r23, r20
 9b8:	33 27       	eor	r19, r19
 9ba:	a0 0d       	add	r26, r0
 9bc:	61 1d       	adc	r22, r1
 9be:	23 1f       	adc	r18, r19
 9c0:	84 9f       	mul	r24, r20
 9c2:	60 0d       	add	r22, r0
 9c4:	21 1d       	adc	r18, r1
 9c6:	82 2f       	mov	r24, r18
 9c8:	76 2f       	mov	r23, r22
 9ca:	6a 2f       	mov	r22, r26
 9cc:	11 24       	eor	r1, r1
 9ce:	9f 57       	subi	r25, 0x7F	; 127
 9d0:	50 40       	sbci	r21, 0x00	; 0
 9d2:	8a f0       	brmi	.+34     	; 0x9f6 <__mulsf3_pse+0x84>
 9d4:	e1 f0       	breq	.+56     	; 0xa0e <__mulsf3_pse+0x9c>
 9d6:	88 23       	and	r24, r24
 9d8:	4a f0       	brmi	.+18     	; 0x9ec <__mulsf3_pse+0x7a>
 9da:	ee 0f       	add	r30, r30
 9dc:	ff 1f       	adc	r31, r31
 9de:	bb 1f       	adc	r27, r27
 9e0:	66 1f       	adc	r22, r22
 9e2:	77 1f       	adc	r23, r23
 9e4:	88 1f       	adc	r24, r24
 9e6:	91 50       	subi	r25, 0x01	; 1
 9e8:	50 40       	sbci	r21, 0x00	; 0
 9ea:	a9 f7       	brne	.-22     	; 0x9d6 <__mulsf3_pse+0x64>
 9ec:	9e 3f       	cpi	r25, 0xFE	; 254
 9ee:	51 05       	cpc	r21, r1
 9f0:	70 f0       	brcs	.+28     	; 0xa0e <__mulsf3_pse+0x9c>
 9f2:	30 cf       	rjmp	.-416    	; 0x854 <__fp_inf>
 9f4:	9f cf       	rjmp	.-194    	; 0x934 <__fp_szero>
 9f6:	5f 3f       	cpi	r21, 0xFF	; 255
 9f8:	ec f3       	brlt	.-6      	; 0x9f4 <__mulsf3_pse+0x82>
 9fa:	98 3e       	cpi	r25, 0xE8	; 232
 9fc:	dc f3       	brlt	.-10     	; 0x9f4 <__mulsf3_pse+0x82>
 9fe:	86 95       	lsr	r24
 a00:	77 95       	ror	r23
 a02:	67 95       	ror	r22
 a04:	b7 95       	ror	r27
 a06:	f7 95       	ror	r31
 a08:	e7 95       	ror	r30
 a0a:	9f 5f       	subi	r25, 0xFF	; 255
 a0c:	c1 f7       	brne	.-16     	; 0x9fe <__mulsf3_pse+0x8c>
 a0e:	fe 2b       	or	r31, r30
 a10:	88 0f       	add	r24, r24
 a12:	91 1d       	adc	r25, r1
 a14:	96 95       	lsr	r25
 a16:	87 95       	ror	r24
 a18:	97 f9       	bld	r25, 7
 a1a:	08 95       	ret
 a1c:	11 f4       	brne	.+4      	; 0xa22 <__mulsf3_pse+0xb0>
 a1e:	0e f4       	brtc	.+2      	; 0xa22 <__mulsf3_pse+0xb0>
 a20:	1f cf       	rjmp	.-450    	; 0x860 <__fp_nan>
 a22:	41 c0       	rjmp	.+130    	; 0xaa6 <__fp_mpack>

00000a24 <sqrt>:
 a24:	6c df       	rcall	.-296    	; 0x8fe <__fp_splitA>
 a26:	d0 f3       	brcs	.-12     	; 0xa1c <__mulsf3_pse+0xaa>
 a28:	99 23       	and	r25, r25
 a2a:	d9 f3       	breq	.-10     	; 0xa22 <__mulsf3_pse+0xb0>
 a2c:	ce f3       	brts	.-14     	; 0xa20 <__mulsf3_pse+0xae>
 a2e:	9f 57       	subi	r25, 0x7F	; 127
 a30:	55 0b       	sbc	r21, r21
 a32:	87 ff       	sbrs	r24, 7
 a34:	46 d0       	rcall	.+140    	; 0xac2 <__fp_norm2>
 a36:	00 24       	eor	r0, r0
 a38:	a0 e6       	ldi	r26, 0x60	; 96
 a3a:	40 ea       	ldi	r20, 0xA0	; 160
 a3c:	90 01       	movw	r18, r0
 a3e:	80 58       	subi	r24, 0x80	; 128
 a40:	56 95       	lsr	r21
 a42:	97 95       	ror	r25
 a44:	28 f4       	brcc	.+10     	; 0xa50 <sqrt+0x2c>
 a46:	80 5c       	subi	r24, 0xC0	; 192
 a48:	66 0f       	add	r22, r22
 a4a:	77 1f       	adc	r23, r23
 a4c:	88 1f       	adc	r24, r24
 a4e:	20 f0       	brcs	.+8      	; 0xa58 <sqrt+0x34>
 a50:	26 17       	cp	r18, r22
 a52:	37 07       	cpc	r19, r23
 a54:	48 07       	cpc	r20, r24
 a56:	30 f4       	brcc	.+12     	; 0xa64 <sqrt+0x40>
 a58:	62 1b       	sub	r22, r18
 a5a:	73 0b       	sbc	r23, r19
 a5c:	84 0b       	sbc	r24, r20
 a5e:	20 29       	or	r18, r0
 a60:	31 29       	or	r19, r1
 a62:	4a 2b       	or	r20, r26
 a64:	a6 95       	lsr	r26
 a66:	17 94       	ror	r1
 a68:	07 94       	ror	r0
 a6a:	20 25       	eor	r18, r0
 a6c:	31 25       	eor	r19, r1
 a6e:	4a 27       	eor	r20, r26
 a70:	58 f7       	brcc	.-42     	; 0xa48 <sqrt+0x24>
 a72:	66 0f       	add	r22, r22
 a74:	77 1f       	adc	r23, r23
 a76:	88 1f       	adc	r24, r24
 a78:	20 f0       	brcs	.+8      	; 0xa82 <sqrt+0x5e>
 a7a:	26 17       	cp	r18, r22
 a7c:	37 07       	cpc	r19, r23
 a7e:	48 07       	cpc	r20, r24
 a80:	30 f4       	brcc	.+12     	; 0xa8e <sqrt+0x6a>
 a82:	62 0b       	sbc	r22, r18
 a84:	73 0b       	sbc	r23, r19
 a86:	84 0b       	sbc	r24, r20
 a88:	20 0d       	add	r18, r0
 a8a:	31 1d       	adc	r19, r1
 a8c:	41 1d       	adc	r20, r1
 a8e:	a0 95       	com	r26
 a90:	81 f7       	brne	.-32     	; 0xa72 <sqrt+0x4e>
 a92:	b9 01       	movw	r22, r18
 a94:	84 2f       	mov	r24, r20
 a96:	91 58       	subi	r25, 0x81	; 129
 a98:	88 0f       	add	r24, r24
 a9a:	96 95       	lsr	r25
 a9c:	87 95       	ror	r24
 a9e:	08 95       	ret

00000aa0 <square>:
 aa0:	9b 01       	movw	r18, r22
 aa2:	ac 01       	movw	r20, r24
 aa4:	58 cf       	rjmp	.-336    	; 0x956 <__mulsf3>

00000aa6 <__fp_mpack>:
 aa6:	9f 3f       	cpi	r25, 0xFF	; 255
 aa8:	31 f0       	breq	.+12     	; 0xab6 <__fp_mpack_finite+0xc>

00000aaa <__fp_mpack_finite>:
 aaa:	91 50       	subi	r25, 0x01	; 1
 aac:	20 f4       	brcc	.+8      	; 0xab6 <__fp_mpack_finite+0xc>
 aae:	87 95       	ror	r24
 ab0:	77 95       	ror	r23
 ab2:	67 95       	ror	r22
 ab4:	b7 95       	ror	r27
 ab6:	88 0f       	add	r24, r24
 ab8:	91 1d       	adc	r25, r1
 aba:	96 95       	lsr	r25
 abc:	87 95       	ror	r24
 abe:	97 f9       	bld	r25, 7
 ac0:	08 95       	ret

00000ac2 <__fp_norm2>:
 ac2:	91 50       	subi	r25, 0x01	; 1
 ac4:	50 40       	sbci	r21, 0x00	; 0
 ac6:	66 0f       	add	r22, r22
 ac8:	77 1f       	adc	r23, r23
 aca:	88 1f       	adc	r24, r24
 acc:	d2 f7       	brpl	.-12     	; 0xac2 <__fp_norm2>
 ace:	08 95       	ret

00000ad0 <_exit>:
 ad0:	f8 94       	cli

00000ad2 <__stop_program>:
 ad2:	ff cf       	rjmp	.-2      	; 0xad2 <__stop_program>
